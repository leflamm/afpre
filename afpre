#!/bin/bash

set -e

### definitions

CFG=~/.afpre

### functions

error_msg() {
	echo "${1}"
	exit 1
}

check_dep() {
	which "${1}" &> /dev/null || error_msg "executable '$1' no found in your \$PATH"
}

encode64() {
	echo -n "${1}" | openssl base64 -base64
}

check_config_file() {
	[ -f "${CFG}" ] || error_msg "missing config file: ${CFG}"
}

check_config_key() {
	grep -q "^${1}=" ${CFG} || error_msg "configuration key \"${1}\" not found in config file \"${CFG}\""
}

variable_empty() {
	[ -z "${1}" ]
}

options_contain() {
	grep -q -- "${1}" <<< "${@:2}"
}

do_help() {
	! read -d '' HELP <<EOF
usage: ${0} [OPTIONS]

OPTIONS
  --help                    ... print this help
  --account ACCOUNT_NAME    ... authenticate towards this account name
  --example-cfg             ... create an example config file at ${CFG}
  --debug                   ... enable debugging
EOF
	echo "${HELP}"
	exit 0
}

do_example_cfg() {
	[ -f ${CFG} ] && {
		echo saving existing ${CFG} to ${CFG}.bak
		mv ${CFG} ${CFG}.bak
	}
	! read -d '' XCFG <<EOF
ACCOUNT=my.account
ROLE=my.role
HOST=my.afp.host
_PATH=/afp-api/latest/account
#NAME=my.name
#PW=my.password # I wouldn't put it here
EOF
	echo "${XCFG}" > ${CFG}
	echo $CFG written
	exit 0
}

DEBUG=false

options_contain '--help' "$@" && do_help
options_contain '--account' "$@" && ACCOUNT_NAME="${2}"
options_contain '--example-cfg' "$@" && do_example_cfg
options_contain '--debug' "$@" && DEBUG=true

$DEBUG && set -x

check_dep curl
check_dep jq
check_dep openssl
check_config_file
if [ -z ${ACCOUNT_NAME+x} ]; then
    check_config_key ACCOUNT
fi
check_config_key ROLE
check_config_key _PATH
check_config_key HOST

source $CFG

if [ ! -z ${ACCOUNT_NAME+x} ]; then
    ACCOUNT="${ACCOUNT_NAME}"
fi

variable_empty "${NAME}" && {
	echo -n "username: " && read NAME
}

variable_empty "${PW}" && {
	echo -n "password: " && read -s PW
	echo
}

X1XBN02R=$(encode64 "${NAME}:${PW}")

! read -r -d '' RC <<EOF
$DEBUG && set -x

for F in /etc/bash.bashrc /etc/bashrc ~/.bashrc ~/.profile
do
    [ -f "\${F}" ] && . "\${F}"
done

error_msg() {
        echo \$1
        exit 1
}

basic_auth() {
        curl -f -s -H "Authorization: Basic \${2}" \${1}
}

json_value() {
        jq -r ."\${2}" <<<"\${1}"
}

token_renew_interval() {
	echo \${RENEW_INT:-\$((\$AWS_VALID_SECONDS - 100 ))}
}

on_mac() {
	[ \$(uname -s) == Darwin ]
}

secs_since_epoch() {
	on_mac && {
		NOZULU=\$(sed 's/Z\$/GMT/g' <<< \${1})
		date -jf %Y-%m-%dT%H:%M:%S%Z \${NOZULU} +%s
	} || {
		date -d \${1} +%s
	}
}

PROMPT_COMMAND="{
        ((\\\$SECONDS >= \\\$(token_renew_interval) )) && {
                echo token expired - need to renew... 
                echo authenticating as ${NAME} for ${ACCOUNT}/${ROLE} against ${HOST}
                JSON=\\\$(basic_auth https://${HOST}${_PATH}/${ACCOUNT}/${ROLE} ${X1XBN02R}) || error_msg \"... failed!\"
                export AWS_ACCESS_KEY_ID=\\\$(json_value \"\\\${JSON}\" AccessKeyId)
                export AWS_SECRET_ACCESS_KEY=\\\$(json_value \"\\\${JSON}\" SecretAccessKey)
                export AWS_SESSION_TOKEN=\\\$(json_value \"\\\${JSON}\" Token)
                export AWS_SECURITY_TOKEN=\\\$(json_value \"\\\${JSON}\" Token)
                export AWS_VALID_SECONDS=\\\$((\\\$(secs_since_epoch \\\$(json_value \"\\\${JSON}\" Expiration))-\\\$(date +%s)))
		SECONDS=0
                echo done.
        }
}"

PS1="AFP|${ACCOUNT}|${ROLE} \$PS1"
EOF

RCFILE=$(mktemp)
echo "${RC}" > $RCFILE

AWS_VALID_SECONDS=0 RENEW_INT=$RENEW_INT bash --rcfile $RCFILE
